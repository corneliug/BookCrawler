en = require('lingo').en

exports.add = (mongooseModel, options) ->
  modelNameToString        = mongooseModel.modelName.toLowerCase()
  modelNameToPluralString  = en.pluralize modelNameToString

  applyMiddleware = (data, action, middlewareType) ->
    data = if options?.middleware?[action]?[middlewareType]? then options.middleware[action][middlewareType](data) else data

  actions =
    get: (conditions={}, cb) ->
      mongooseModel.find applyMiddleware(conditions, 'get', 'before'), (errors, documents) -> 
        response = {}
        if !errors
          response.status = 'success'
          response[modelNameToPluralString] = documents
        else
          response.status = 'failure'
          response.errors = errors
        cb applyMiddleware response, 'get', 'after'

    getById: (id, cb) ->
      # TODO - handle errors being returned from the find
      mongooseModel.findById applyMiddleware(id, 'getById', 'before'), (errors, documents) ->
        response = {}
        if documents? 
          response.status       = 'success'
          response[modelNameToString]  = documents
        else 
          response.status       = 'failure'
          response.errors       = "#{modelNameToString} with id: #{id} not found"
        cb applyMiddleware response, 'getById', 'after'

    create: (data, cb) ->
      new mongooseModel(applyMiddleware(data, 'create', 'before')).save (errors, document) ->
        response = {}
        if !errors
          response.status      = 'success'
          response[modelNameToString] = document
        else 
          response.status      = 'failure'
          response.errors      = errors 
        cb applyMiddleware response, 'create', 'after'

    update: (data, cb) ->
      data = applyMiddleware(data, 'update', 'before')
      mongooseModel.findById data._id, (errors, document) ->
        response = {}
        if !errors
          if document?
            for key,value of data
              document[key] = value unless key is '_id'
            document.save (errors) ->
              if !errors
                response.status             = "success"
                response[modelNameToString] = document
                cb applyMiddleware response, 'update', 'after'
              else
                response.status             = 'failure'
                response.errors             = errors
                cb applyMiddleware response, 'update', 'after'
          else
            response.status       = 'failure'
            response.errors       = "#{modelNameToString} with id: #{id} not found"
            cb applyMiddleware response, 'update', 'after'
        else
          response.status = "failure"
          response.errors = errors
          cb applyMiddleware response, 'update', 'after'


    remove: (id, cb) ->
      id = applyMiddleware id, 'remove', 'before'
      # TODO - redo this, it is completely wrong
      mongooseModel.remove {_id:id}, ->
        cb applyMiddleware {status: 'success', _id: id}, 'remove', 'after'