app = require '../app.coffee'

describe "app", ->

  describe "resource", ->

    beforeEach ->
  		global.mongoose = require 'mongoose'
  		mongoose.connect "mongodb://localhost/socketstream_resource_test"
  		global.Schema   = mongoose.Schema
  		global.ObjectId = Schema.ObjectId
  		global.Products = new Schema name: String, type: String
  		global.Product = mongoose.model 'Product', Products

    it "should receive an empty object and a mongoose model as it's mandatory arguments", ->
      actions = app.add Product
      expect(typeof(actions.get) is "function").toBeTruthy()  
      expect(typeof(actions.getById) is "function").toBeTruthy()  
      expect(typeof(actions.create) is "function").toBeTruthy()  
      expect(typeof(actions.update) is "function").toBeTruthy()  
      expect(typeof(actions.remove) is "function").toBeTruthy()

  describe "actions", ->

  	describe "get", ->
      
      beforeEach ->
        new Product({name: "Product X"}).save (errors, document) -> throw errors if errors?
        new Product({name: "Product Y"}).save (errors, document) -> throw errors if errors?
      
      afterEach ->
        responded = no
        Product.remove {}, -> responded = yes
        waitsFor -> responded
   
      it "should return all of the documents in the collection", ->
        responded = no
        actions = app.add Product
        actions.get {}, (response) ->
          expect(response.status).toEqual 'success' 
          expect(response.products.length).toEqual 2
          responded = yes
        waitsFor -> responded

      it "should return documents that match criteria", ->
        responded = no
        actions = app.add Product
        actions.get {name: "Product X"}, (response) ->
          expect(response.status).toEqual 'success' 
          expect(response.products.length).toEqual 1
          responded = yes
        waitsFor -> responded

  	describe "getById", ->

      beforeEach ->
        responded = no
        new Product({name: "Product X"}).save (errors, document) -> 
          responded = yes
          throw errors if errors?
          global.id = document._id
        waitsFor -> responded

      afterEach ->
        responded = no
        Product.remove {}, -> responded = yes
        waitsFor -> responded
      
      it "should return a document given an id", ->
        responded = no
        actions = app.add Product
        actions.getById id, (response) ->
          expect(response.status).toEqual 'success' 
          expect(response.product.name).toEqual "Product X"
          responded = yes
        waitsFor -> responded


      it "should return a failure status if the object with the id cannot be found", ->
        responded = no
        actions = app.add Product
        falseId = "asdkasjdksajdk"
        actions.getById falseId, (response) ->
          expect(response.status).toEqual 'failure' 
          expect(response.errors).toEqual "product with id: #{falseId} not found"
          responded = yes
        waitsFor -> responded

  	describe "create", ->

      afterEach ->
        responded = no
        Product.remove {}, -> responded = yes
        waitsFor -> responded

      it "should return the created document upon a successful creation", ->
        responded = no
        actions = app.add Product
        actions.create {name: "Product Z"}, (response) ->
          expect(response.status).toEqual 'success' 
          expect(response.product.name).toEqual "Product Z"
          responded = yes
        waitsFor -> responded

      it "should return an error response", ->
        #TODO - do this

  	describe "update", ->

      beforeEach ->
        responded = no
        new Product({name: "Product Z", type: "Cheeze"}).save (errors, document) -> 
          responded = yes
          throw errors if errors?
          global.document = document
        waitsFor -> responded
      
      afterEach ->
        responded = no
        Product.remove {}, -> responded = yes
        waitsFor -> responded

      it "should return success", ->
        responded = no
        actions = app.add Product
        actions.update {_id: document._id, name: "Product A1"}, (response) ->
          Product.findById document._id, (err,doc) ->
            responded = yes
            expect(doc.name).toEqual "Product A1"
            expect(doc.type).toEqual "Cheeze"
            expect(response.status).toEqual "success"
            expect(doc._id).toEqual document._id
        waitsFor -> responded

  	describe "remove", ->
      
      beforeEach ->
        responded = no
        new Product({name: "Product Z"}).save (errors, document) -> 
          responded = yes
          throw errors if errors?
          global.document = document
        waitsFor -> responded

      it "should return success", ->
        responded = no
        actions = app.add Product
        id = document._id
        actions.remove id, (response) ->
          Product.findById id, (err,doc) ->
            responded = yes
            expect(doc).toEqual null
            expect(response.status).toEqual "success"
            expect(response._id).toEqual id
        waitsFor -> responded
    
    describe "middleware", ->
      
      describe "before", ->

        beforeEach ->
          responded = no
          new Product({name: "Product Z"}).save (errors, document) -> 
            responded = yes
            throw errors if errors?
            global.document = document
          waitsFor -> responded

        afterEach ->
          responded = no
          Product.remove {}, -> responded = yes
          waitsFor -> responded

        it "should execute a function before an action is executed", ->
          responded = no
          actions = app.add Product, 
          middleware: 
            get:
              before: (data) -> 
                data.name = "Product X"
                data

          actions.get {}, (response) ->
            expect(response.status).toEqual 'success' 
            expect(response.products.length).toEqual 0
            responded = yes
          waitsFor -> responded
      
      describe "after", ->

        beforeEach ->
          responded = no
          new Product({name: "Product Z"}).save (errors, document) -> 
            responded = yes
            throw errors if errors?
            global.document = document
          waitsFor -> responded

        afterEach ->
          responded = no
          Product.remove {}, -> responded = yes
          waitsFor -> responded

        it "should execute a function before an action is executed", ->
          responded = no
          actions = app.add Product, 
          middleware: 
            get:
              after: (data) -> 
                data.requested_by = "Paul"
                data

          actions.get {}, (response) ->
            expect(response.requested_by).toEqual "Paul"
            responded = yes
          waitsFor -> responded

